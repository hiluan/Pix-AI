import React, { useEffect, useRef, useState } from "react";
import { FormField, Card, Loader, Slideshow } from "../../components";

const RenderCards = ({ data, title }) => {
  if (data?.length > 0)
    return data.map((post) => <Card key={post._id} {...post} />);
  return (
    <h2 className="mt-5 font-bold text-[#6449ff] text-xl uppercase">{title}</h2>
  );
};

const Home = () => {
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState(null);
  const [searchText, setSearchText] = useState("");
  const [searchedResults, setSearchedResults] = useState(null);
  const [searchTimeout, setSearchTimeout] = useState(null);

  useEffect(() => {
    const fetchPosts = async () => {
      setLoading(true);
      try {
        if (import.meta.env.VITE_API_POST) {
          const response = await fetch(import.meta.env.VITE_API_POST, {
            method: "GET",
            headers: {
              "Content-Type": "application/json",
            },
          });

          if (response.ok) {
            const result = await response.json();
            setAllPosts(result.data.reverse());
          }
        } else {
          throw new Error("VITE_API_POST environment variable is not defined");
        }
      } catch (error) {
        console.log(error);
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, []);

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResults = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );

        setSearchedResults(searchResults);
      }, 500)
    );
  };

  const bgRef = useRef(null);
  const contentRef = useRef(null);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.pageYOffset;
      const bg = bgRef.current;
      const content = contentRef.current;

      if (bg && content) {
        bg.style.transform = `translateY(-${scrollTop * 0.2}px)`;
        content.style.transform = `translateY(-${scrollTop * 0.8}px)`;
      }
    };

    window.addEventListener("scroll", handleScroll);

    return () => {
      window.removeEventListener("scroll", handleScroll);
    };
  }, []);

  return (
    <section className="parallax-container">
      <div ref={bgRef} className="parallax-bg">
        <Slideshow firstThree={allPosts && allPosts.slice(0, 3)} />
      </div>
      <div
        ref={contentRef}
        className="parallax-content absolute z-10 sm:p-8 px-4 py-8 pt-14 w-full min-h-[calc(100vh-73px)]"
        style={{
          boxShadow: "0 0 50px rgba(0, 0, 0, 0.5)",
        }}
      >
        <div className="max-w-7xl mx-auto mt-20">
          <div>
            <h1 className="font-extrabold text-[#222328] text-[32px]">
              The Community Showcase
            </h1>
            <p className="mt-2 text-[#666e75] text-[16px] max-w[500px]">
              Browser through a collection of imaginative and visually stunning
              images generated by DALL-E AI{" "}
            </p>
          </div>
          <div className="mt-16">
            <FormField
              labelName="Search Posts"
              type="text"
              name="text"
              placeholder="Search Posts..."
              value={searchText}
              handleChange={handleSearchChange}
            />
          </div>
          <div className="mt-10">
            {loading ? (
              <div className="flex justify-center items-center">
                <Loader />
              </div>
            ) : (
              <>
                {searchText && (
                  <h2 className="font-medium text=[#666e75] text-xl mb-3">
                    Showing results for{" "}
                    <span className="text-[#222328]">{searchText} </span>
                  </h2>
                )}

                <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
                  {searchText ? (
                    <RenderCards
                      data={searchedResults}
                      title="No search results found"
                    />
                  ) : (
                    <RenderCards
                      data={allPosts && allPosts.slice(3)}
                      title="No posts found"
                    />
                  )}
                </div>
              </>
            )}
          </div>
        </div>
      </div>
    </section>
  );
};

export default Home;
